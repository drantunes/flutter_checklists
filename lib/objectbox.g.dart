// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/models/checklist_box.dart';
import 'data/models/checklist_tasks_box.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 3960984888342158501),
    name: 'ChecklistBox',
    lastPropertyId: const obx_int.IdUid(2, 5899436723301470051),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 6588602723698952371),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 5899436723301470051),
        name: 'date',
        type: 9,
        flags: 2080,
        indexId: const obx_int.IdUid(1, 2848075145250565363),
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'tasks',
        srcEntity: 'ChecklistTasksBox',
        srcField: 'checklist',
      ),
    ],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 3397873879458457040),
    name: 'ChecklistTasksBox',
    lastPropertyId: const obx_int.IdUid(4, 5938591127276113797),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 3825381366691888558),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2133738071133060218),
        name: 'category',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5678689892512552120),
        name: 'completedTasks',
        type: 30,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 5938591127276113797),
        name: 'checklistId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(2, 4738978815607999161),
        relationTarget: 'ChecklistBox',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(
    getObjectBoxModel(),
    directory: directory ?? (await defaultStoreDirectory()).path,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(2, 3397873879458457040),
    lastIndexId: const obx_int.IdUid(2, 4738978815607999161),
    lastRelationId: const obx_int.IdUid(0, 0),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    ChecklistBox: obx_int.EntityDefinition<ChecklistBox>(
      model: _entities[0],
      toOneRelations: (ChecklistBox object) => [],
      toManyRelations: (ChecklistBox object) => {
        obx_int.RelInfo<ChecklistTasksBox>.toOneBacklink(
          4,
          object.id,
          (ChecklistTasksBox srcObject) => srcObject.checklist,
        ): object.tasks,
      },
      getId: (ChecklistBox object) => object.id,
      setId: (ChecklistBox object, int id) {
        object.id = id;
      },
      objectToFB: (ChecklistBox object, fb.Builder fbb) {
        final dateOffset = fbb.writeString(object.date);
        fbb.startTable(3);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, dateOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final dateParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final object = ChecklistBox(dateParam)
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        obx_int.InternalToManyAccess.setRelInfo<ChecklistBox>(
          object.tasks,
          store,
          obx_int.RelInfo<ChecklistTasksBox>.toOneBacklink(
            4,
            object.id,
            (ChecklistTasksBox srcObject) => srcObject.checklist,
          ),
        );
        return object;
      },
    ),
    ChecklistTasksBox: obx_int.EntityDefinition<ChecklistTasksBox>(
      model: _entities[1],
      toOneRelations: (ChecklistTasksBox object) => [object.checklist],
      toManyRelations: (ChecklistTasksBox object) => {},
      getId: (ChecklistTasksBox object) => object.id,
      setId: (ChecklistTasksBox object, int id) {
        object.id = id;
      },
      objectToFB: (ChecklistTasksBox object, fb.Builder fbb) {
        final categoryOffset = fbb.writeString(object.category);
        final completedTasksOffset = fbb.writeList(
          object.completedTasks.map(fbb.writeString).toList(growable: false),
        );
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, categoryOffset);
        fbb.addOffset(2, completedTasksOffset);
        fbb.addInt64(3, object.checklist.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final categoryParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final object = ChecklistTasksBox(categoryParam)
          ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
          ..completedTasks = const fb.ListReader<String>(
            fb.StringReader(asciiOptimization: true),
            lazy: false,
          ).vTableGet(buffer, rootOffset, 8, []);
        object.checklist.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        object.checklist.attach(store);
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [ChecklistBox] entity fields to define ObjectBox queries.
class ChecklistBox_ {
  /// See [ChecklistBox.id].
  static final id = obx.QueryIntegerProperty<ChecklistBox>(
    _entities[0].properties[0],
  );

  /// See [ChecklistBox.date].
  static final date = obx.QueryStringProperty<ChecklistBox>(
    _entities[0].properties[1],
  );

  /// see [ChecklistBox.tasks]
  static final tasks = obx.QueryBacklinkToMany<ChecklistTasksBox, ChecklistBox>(
    ChecklistTasksBox_.checklist,
  );
}

/// [ChecklistTasksBox] entity fields to define ObjectBox queries.
class ChecklistTasksBox_ {
  /// See [ChecklistTasksBox.id].
  static final id = obx.QueryIntegerProperty<ChecklistTasksBox>(
    _entities[1].properties[0],
  );

  /// See [ChecklistTasksBox.category].
  static final category = obx.QueryStringProperty<ChecklistTasksBox>(
    _entities[1].properties[1],
  );

  /// See [ChecklistTasksBox.completedTasks].
  static final completedTasks =
      obx.QueryStringVectorProperty<ChecklistTasksBox>(
        _entities[1].properties[2],
      );

  /// See [ChecklistTasksBox.checklist].
  static final checklist =
      obx.QueryRelationToOne<ChecklistTasksBox, ChecklistBox>(
        _entities[1].properties[3],
      );
}
